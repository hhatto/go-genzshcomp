package main

import (
	"bufio"
	"flag"
	"fmt"
	"log"
	"os"
	"regexp"
)

var Header = `
#
# this is zsh completion function file.
# generated by go-genzshcomp
#

typeset -A opt_args
local context state line

_arguments -s -S \`
var regexAppName = regexp.MustCompile("^Usage of (.+?):$")
var regexOptionLine = regexp.MustCompile("  -(.+?)=(.+?): (.+?)$")
var FlagSet *flag.FlagSet
var AppName string
var Options []string = []string{}

func getAppName(line string) (appName string, ok bool) {
	match := regexAppName.FindStringSubmatch(line)
	if len(match) != 0 {
		appName = match[1]
		return appName, true
	}

	return appName, false
}

func parse(line string) {
	appName, ok := getAppName(line)
	if ok {
		FlagSet = flag.NewFlagSet(appName, flag.ExitOnError)
		AppName = appName
		return
	}

	match := regexOptionLine.FindStringSubmatch(line)
	if len(match) != 0 {
		FlagSet.String(match[1], match[2], match[3])
		Options = append(Options, match[1])
	}
}

func printZshCompletionFunction() {
	fmt.Printf("#compdef %s\n\n", AppName)
	fmt.Println(Header)
	for _, opt := range Options {
		f := FlagSet.Lookup(opt)
		fmt.Printf("  \"-%s[%s (default: %s)]::VAR:_gnu_generic\" \\\n", f.Name, f.Usage, f.DefValue)
	}
	fmt.Println("  \"*::args:_gnu_generic\" && return 0")
}

func main() {
	var scanner = bufio.NewScanner(os.Stdin)

	for scanner.Scan() {
		line := scanner.Text()
		parse(line)
	}
	if err := scanner.Err(); err != nil {
		log.Println("scanner error:", err)
	}

	printZshCompletionFunction()
}
